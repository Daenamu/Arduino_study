[함수]

millis() : ms 반환, unsigned long 타입, 보드에 전원이 인가된 후 지난 시간을 반환한다. 50일이 지나면 다시 0부터 시작
micros() : us 반환, 16MHz 보드에서는 항상 4의 배수 값만 반환. 71분이 지나면 다시 0부터 시작
delay(ms) : 밀리초 단위로 프로그램이 대기. 시리얼 통신이나 센서 체크 등의 기능 사용 불가.
* 타이머 인터럽트를 사용하기 때문에 다른 인터럽트 처리 루틴에서 사용 불가능.

delayMicroseconds(us) : us 반환, 4클럭을 소모하는 의미 없는 명령어를 수행하여, 클럭 속도에 맞춰 us로 변환해줌.
* 인터럽트와 상관 없이 사용가능.

** 인터럽트 루틴 내에서는 지연 함수는 안쓰는게 제일 좋음.



[실습]
blink without delay 코드
* 서로 다른 동작에 대해 다른 시간 간격을 적용시킬려면 다른 previous 변수를 만들면 됨.


const int ledPin = 13;
int ledState = LOW;

unsigned long previousMillis = 0;
const long interval = 1000;

void setup() {
    pinMode(ledPin, OUTPUT);
}
void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) { // 1000ms 가 되기 전까지 pass
        previousMillis = currentMillis;

        if (ledState == LOW) {
            ledState = HIGH;
        }
        else {
            ledState = LOW;
        }

        digitalWrite(ledPin, ledState);
    }
}



[MsTimer2 라이브러리]

#include <MsTimer2>

MsTimer2::set(ms, ISR) : 타이머 주기, 주기마다 발생되는 인터럽트 처리 함수명
MsTimer2::start()      : 타이머 활성화, 호출된 순간부터 인터럽트 발생, 위의 코드와 동일한 효과
MsTimer2::end()        : 타이머 해제.

* 메가에서는 사용 안됨


[실습]

#include <MsTimer2>

int ledPin = 13;
int ledState = LOW;

void setup() {
    pinMode(ledPin, OUTPUT);

    MsTimer2::set(1000, timerISR);
    MsTimer2::start();

    Serial.begin();
}

void loop() {

}

void timerISR() {
    if (ledState == LOW) {
        ledState = HIGH;
    }
    else {
        ledState = LOW;
    }

    digitalWrite(ledPin, ledState);
    Serial.println("Timer Check");
}


[참고]
라이브러리 추가하는 방법

1. 필요한 라이브러리를 다운
2. 아두이노의 libraries폴더에 압축을 푼다
3. 스케치 툴 실행 후, include 하기
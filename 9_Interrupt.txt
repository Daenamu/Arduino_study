[배경지식]
인터럽트 : 실행 중인 프로그램을 일시 중단, 다른 프로그램을 끼워 넣어 실행.
--> loop() 함수 내용과 상관 없이 핀의 상태가 변경(인터럽트 조건)될 때, 사용자 정의 함수를 무조건 실행.

외부 인터럽트 : 핀의 상태가 변경되어 발생하는 인터럽트(외부 요인), 지정 핀만 사용 가능
    1. FALLING : HIGH->LOW로 바뀔 때 발생
    2. RISING : LOW->HIGH로 바뀔 때 발생
    3. CHANGE : 신호가 바뀔 때 발생
    4. LOW : 신호가 LOW일 때 발생, 반복 호출됨.

인터럽트 핀 : 
    메가와 레오나르도를 제외하고 대부분 2개. 
    int.0, int.1 와 같이 인터럽트 번호를 붙임. 
    보드마다 할당 핀 번호는 다를 수 있음.

채터링 : 
    스위치의 접점이 붙거나 떨어질 때 진동에 의해 매우 짧은 시간 안에 붙었다 떨어졌다를 반복.
    --> delayMicroseconds() 함수를 사용해서 해결! 타이머를 사용하지 않기 때문에 괜찮음.
          *ISR 처리가 길어져 다른 인터럽트가 처리 안될 수 있으므로 좋지 않은 코드이긴 함.
          *02.Digital->Debounce 예제 참고

주의사항 :
    인터럽트 안에서 delay()나 millis() 함수를 사용하면 안됨.
    이 함수도 타이머 인터럽트를 사용하고, 동시에 여러개의 인터럽트가 처리되지 않기 때문.


[함수]
attachInterrupt(intNo, ISR, mode) :
    intNo : 인터럽트 번호, 우노는 0번이 2번핀, 1번이 3번핀에 해당됨. 보드에 따라 다르므로 반드시 매칭 필요!
    ISR : 인터럽트 발생 시 호출될 함수 이름
    mode : 인터럽트 모드, FALLING/RISING/CHANGE/LOW 중 하나 선택.

detachInterrupt(intNo) : 인터럽트 비활성화
noInterrupts() : 모든 인터럽트 비활성화
interrupts() : 비활성화된 모든 인터럽트 활성화

* 아두이노 두에는 모든 핀을 인터럽트로 사용가능. 함수 원형이 다르다
attachInterrupt(pin, ISR, mode) // pin 번호를 받음
detachInterrupt(pin)


[실습]
스위치로 led 버튼 키고 끄기
led는 13번에, 스위치는 2번에 연결되어있으며 따로 저항은 없음.


int ledPin = 13;
int swPin = 2;  // int.0
boolean bLedOn = false;

void setup() {
    pinMode(ledPin, OUTPUT);
    pinMode(swPin, INPUT_PULLUP); // 저항이 없으므로 내부 저항 사용
    attachInterrupt(0, swInterrupt, FALLING);   // 스위치가 눌린 경우에 함수 호출.

    digitalWrite(ledPin, LOW);  // 초기에는 꺼진 상태.
}

void loop() {
    delay(1000)
}

void swInterrupt() {
    delayMicroseconds(2000);    // 2밀리초, 0.002초
    if (digitalRead(swPin) != LOW) return;

    if (bLedOn == false) {
        digitalWrite(ledPin, HIGH);
        bLedOn = true;
    }
    else {
        digitalWrite(ledPin, LOW);
        bLedOn = false;
    }
}